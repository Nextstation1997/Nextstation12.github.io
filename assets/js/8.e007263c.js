(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{224:function(v,_,e){"use strict";e.r(_);var t=e(0),o=Object(t.a)({},function(){var v=this,_=v.$createElement,e=v._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"控制语句"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#控制语句","aria-hidden":"true"}},[v._v("#")]),v._v(" 控制语句")]),v._v(" "),e("p",[v._v("现在开始我们需要学习流程控制语句，流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。控制语句分为三类：顺序、选择和循环。")]),v._v(" "),e("ul",[e("li",[e("p",[e("code",[v._v("顺序结构")]),v._v("代表“先执行a，再执行b”的逻辑。比如，先找个女朋友，再给女朋友打电话；先订婚，再结婚。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("选择结构")]),v._v("代表“如果…，则…”的逻辑。比如，如果女朋友来电，则迅速接电话；如果看到红灯，则停车。")])]),v._v(" "),e("li",[e("p",[e("code",[v._v("循环结构")]),v._v("代表“如果…，则再继续…”的逻辑。比如，如果没打通女朋友电话，则再继续打一次； 如果没找到喜欢的人，则再继续找。")])])]),v._v(" "),e("p",[v._v("前面讲解的程序都是顺序结构，即按照书写顺序执行每一条语句，这并不是我们的重点，因此接下来我们研究的重点是"),e("code",[v._v("选择结构")]),v._v("和"),e("code",[v._v("循环结构")]),v._v("。")]),v._v(" "),e("p",[v._v("很神奇的是，三种流程控制语句就能表示所有的事情！不信，你可以试试拆分你遇到的各种事情。实际上，任何软件和程序，小到一个练习，大到一个操作系统，本质上都是由"),e("code",[v._v("变量")]),v._v("、"),e("code",[v._v("选择语句")]),v._v("、"),e("code",[v._v("循环语句")]),v._v("组成。")]),v._v(" "),e("p",[v._v("这三种基本逻辑结构是相互支撑的，它们共同构成了算法的基本结构，无论怎样复杂的逻辑结构，都可以通过它们来表达。上述两种结构组成的程序可以解决全部的问题，所以任何一种高级语言都具备上述两种结构。")]),v._v(" "),e("p",[v._v("因此，接下来是大家真正跨入编程界的“门槛”，是成为“程序猿”的“门票”。")])])},[],!1,null,null,null);_.default=o.exports}}]);